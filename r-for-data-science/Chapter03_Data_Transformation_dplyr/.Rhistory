library(tidyverse)
# we also use data from the nycflights13 package
library(nycflights13)
summarize(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))
# Summarize to compute distance, average delay, and number offlights.
delay <- summarize(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))
# Group flights by destination.
by_dest <- group_by(flights, dest)
# Summarize to compute distance, average delay, and number offlights.
delay <- summarize(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
# Filter to remove noisy points and Honolulu airport, which is almost
# twice as far away as the next closest airport.
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# the variable is passed on to the next function with %>%
x <- c(3, 5) %>% mean()
x
delays <- flights %>%
group_by(dest) %>%
summarize(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20, dest != "HNL")
flights %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay))
flights %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay), na.rm = TRUE)
flights %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay), na.rm = TRUE)
flights %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay, na.rm = TRUE))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarize(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarize(delay = mean(arr_delay))
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
library(Lahman)
# First, we convert the data to a tibble
batting <- as.tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarize(ba = sum(H, na.rm = TRUE)) / sum(AB, na.rm = TRUE)
# First, we convert the data to a tibble
batting <- as.tibble(Lahman::Batting)
batting
batters <- batting %>%
group_by(playerID) %>%
summarize(ba = sum(H, na.rm = TRUE)) / sum(AB, na.rm = TRUE)
# First, we convert the data to a tibble
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarize(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE))
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba, alpha = 2/5)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba, alpha = 1/10)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
arrange(desc(ba))
?arrange
not_cancelled %>%
group_by(dest) %>%
summarize(distance_sd = sd(distance)) %>%
arrange(desc(distance_sd))
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first = min(dep_time),
last = max(dep_time))
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first_dep = first(dep_time),
last_dep = last(dep_time))
