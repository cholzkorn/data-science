means <- c(0, 1, 2)
output <- double()
means <- c(0, 1, 2)
output <- double()
for (i in seq_along(means)){
n <- sample(100, 1)
output <- c(output, rnorm(n, means[[i]]))
}
output
out <- vector("list", length(means))
out <- vector("list", length(means))
for (i in seq_along(means)){
n <- sample(100, 1)
out[[i]] <- rnorm(n, means[[i]])
}
out
str(unlist(out))
# stricter option, only working with doubles:
purrr::flatten_dbl()
# stricter option, only working with doubles:
purrr::flatten_dbl(out)
# flatten list out to single vector:
unlist(out)
flip <- function() sample(c("T", "H"), 1)
flip
flips <- 0
nheads <- 0
while(nheads < 3){
if(flip() == H){
nheads <- nheads + 1
}
else {
nheads <- 0
}
flips <- flips + 1
}
while(nheads < 3){
if(flip() == "H"){
nheads <- nheads + 1
}
else {
nheads <- 0
}
flips <- flips + 1
}
flips
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
output <- vector("double", length(df))
for (i in seq_along(df)){
output[[i]] <- mean(df[[i]])
}
output
col_mean <- function(df) {
output <- vector("double", length(df))
for (i in seq_along(df)) {
output[i] <- mean(df[[i]])
}
output
}
col_median <- function(df) {
output <- vector("double", length(df))
for (i in seq_along(df)) {
output[i] <- median(df[[i]])
}
output
}
col_sd <- function(df) {
output <- vector("double", length(df))
for (i in seq_along(df)) {
output[i] <- sd(df[[i]])
}
output
}
col_summary <- function(df, fun) {
output <- vector("double", length(df))
for (i in seq_along(df)) {
output[i] <- fun(df[[i]])
}
output
}
col_summary(df, median)
map_dbl(df, mean)
map_dbl(df, median)
map_dbl(df, sd)
df %>% map_dbl(mean)
df %>% map_dbl(median)
df %>% map_dbl(sd)
map_dbl(df, mean, trim = 0.5)
z <- list(x = 1:3, y = 4:5)
map_int(z, length)
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
models
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
models %>%
map(summary) %>%
map_dbl("r.squared")
# You can also use an integer to select elements by position:
# You can also use an integer to select elements by position:
list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))
x %>% map_dbl(2)
# You can also use an integer to select elements by position:
x <- list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))
x %>% map_dbl(2)
safe_log <- safely(log)
str(safe_log(10))
str(safe_log("a"))
# safely() is designed to work with map:
x <- list(1, 10, "a")
y <- x %>% map(safely(log))
str(y)
y <- y %>% tanspose()
y <- y %>% transpose()
str(y)
is_ok <- y$error %>% map_lgl(is_null)
x[!is_ok]
y$result[is_ok] %>% flatten_dbl()
x <- list(1, 10, "a")
x %>% map_dbl(possibly(log, NA_real_))
x <- list(-1, 1)
x <- list(1, -1)
x %>% map(quietly(log)) %>% str()
mu <- list(5, 10, -3)
mu %>%
map(rnorm, n = 5) %>%
str()
sigma <- list(1, 5, 10)
seq_along(mu) %>%
map(~ rnorm(5, mu[[.]], sigma[[.]])) %>%
str()
map2(mu, signma, rnorm, n = 5) %>%
str()
map2(mu, sigma, rnorm, n = 5) %>%
str()
set.seed(123)
mu <- list(5, 10, -3)
mu %>%
map(rnorm, n = 5) %>%
str()
sigma <- list(1, 5, 10)
seq_along(mu) %>%
map(~ rnorm(5, mu[[.]], sigma[[.]])) %>%
str()
map2(mu, sigma, rnorm, n = 5) %>%
str()
sigma <- list(1, 5, 10)
seq_along(mu) %>%
map(~ rnorm(5, mu[[.]], sigma[[.]])) %>%
str()
seq_along(mu) %>%
map(~ rnorm(5, mu[[.]], sigma[[.]])) %>%
str()
