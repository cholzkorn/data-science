count(partyid)
gss_cat %>%
mutate(relig = fct_lum(relig)) %>%
count(relig)
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = TRUE) %>%
print(n = Inf)
rm(list=ls())
# Prerequisites
install.packages("lubridate")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
library(nycflights13)
# To get the current date or date-time you can use today() or now():
today()
now()
ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
ymd(20170131, tz = "UTC")
flights %>%
select(year, month, day, hour, minute)
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
make_datetime(year, month, day, time %/% 100, time %% 100)
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400)
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600) # 600 s = 1 minute
as_datetime(today())
as_date(now())
as_datetime(60 * 60 * 10)
as_date(365 * 10 + 2)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
ydm(d1)
mdy(d1)
ymd(d2)
dmy(d3)
mdy(d4)
mdy(d5)
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
yday(now())
now()
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar()
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
xlim(30000, 50000)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(xlim = c(30000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
coord_cartesian(xlim = c(30000, 50000)) +
geom_bar()
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(ylim = c(30000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(ylim = c(40000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(ylim = c(45000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(ylim = c(40000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar() +
coord_cartesian(ylim = c(30000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar(fill = "blue", alpha = 0.5) +
coord_cartesian(ylim = c(30000, 50000))
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar(fill = "blue", alpha = 0.5) +
coord_cartesian(ylim = c(30000, 50000)) +
stat_count(aes(label = ..count..), geom = "text")
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar(fill = "blue", alpha = 0.5) +
coord_cartesian(ylim = c(30000, 50000)) +
stat_count(aes(label = ..count..), geom = "text", vjust = 0)
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar(fill = "blue", alpha = 0.5) +
stat_count(aes(label = ..count..), geom = "text", vjust = 0)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar(fill = "blue", alpha = 0.5) +
coord_cartesian(ylim = c(30000, 50000)) +
stat_count(aes(label = ..count..), geom = "text", vjust = 0.2)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) +
geom_bar(fill = "blue", alpha = 0.5) +
coord_cartesian(ylim = c(30000, 50000)) +
stat_count(aes(label = ..count..), geom = "text", vjust = -0.2)
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
sched_dep <- flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n())
ggplot(sched_dep, aes(minute, avg_delay)) +
geom_line()
ggplot(sched_dep, aes(minute, n)) +
geom_line()
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) +
geom_line()
(datetime <- ymd_hms("2016-07-08 12:34:56"))
year(datetime)
year(datetime) <- 2020
datetime
month(datetime) <- 1
datetime
hour(datetime) <- hour(datetime) + 1
datetime
update(datetime, year = 2020, month = 2, mday = 2, hour = 2)
ymd("2015-02-01") %>%
update(mday = 30)
ymd("2015-02-01") %>%
update(hour = 400)
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
# In R, when you substract two dates, you get a difftime object
h_age <- today() - ymd(19791014)
h_age
as.duration(h_age)
# Durations come with a bunch of convenient constructors:
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
one_pm <- ymd_hms(
"2016-03-12 13:00:00",
tz = "America/New_York"
)
one_pm
one_pm + ddays(1)
one_pm
one_pm + days(1)
seconds(15)
minutes(10)
hours(c(12, 24))
days(7)
months(1:6)
weeks(3)
years(1)
# You can add and multiply periods:
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
# A leap year
ymd("2016-01-01") + dyears(1)
ymd("2016-01-01") + years(1)
# Daylight Savings Time
one_pm + ddays(1)
one_pm + days(1)
# Let’s use periods to fix an oddity related to our flight dates. Some
# planes appear to have arrived at their destination before they depar‐
# ted from New York City:
flights_dt %>%
filter(arr_time < dep_time)
flights_dt <- flights_dt %>%
mutate(
overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1)
)
flights_dt %>%
filter(overnight, arr_time < dep_time)
years(1) / days(1)
next_year <- today() + years(1)
(today() %--% next_year) / ddays(1)
(today() %--% next_year) %/% days(1)
TRUE *1
TRUE
TRUE * 1
# What does R think my current time zone is?
Sys.timezone()
# And see the complete list of all time zone names with OlsonNames():
length(OlsonNames())
head(OlsonNames())
(x1 <- ymd_hms("2015-06-01 12:00:00", tz = "America/New_York"))
(x2 <- ymd_hms("2015-06-01 18:00:00", tz = "Europe/Copenhagen"))
(x3 <- ymd_hms("2015-06-02 04:00:00", tz = "Pacific/Auckland"))
# You can verify that they’re the same time using subtraction:
x1 - x2
x1 - x3
x4 <- c(x1, x2, x3)
x4
x4a <- with_tz(x4, tzone = "Australia/Lord_Howe")
x4a
x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
x4b - x4
rm(list=ls())
library(magrittr)
library(tidyverse)
library(magrittr)
install.packages(magrittr)
install.packages("magrittr")
install.packages("magrittr")
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
library(tidyverse)
library(magrittr)
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
pryr::object_size(diamonds)
install.packages("pryr")
library(pryr)
pryr::object_size(diamonds2)
pryr::object_size(diamonds)
pryr::object_size(diamonds, diamonds2)
diamonds$carat[1] <- NA
pryr::object_size(diamonds)
pryr::object_size(diamonds2)
pryr::object_size(diamonds, diamonds2) # no need to duplicate data
x
assign("x", 10)
x
"x" %>% assign(100)
x
env <- environment()
"x" %>% assign(100, envir = env)
x
tryCatch(stop("!"), error = function(e) "An error")
stop("!") %>%
tryCatch(error = function(e) "An error")
tryCatch(stop("!"), error = function(e) "An error")
stop("!") %>%
tryCatch(error = function(e) "An error")
rnorm(100) %>%
matrix(ncol = 2) %>%
plot() %>%
str()
mtcars %$%
cor(disp, mpg)
mtcars <- mtcars %>%
mtcars <- mtcars %>%
transform(cyl = cyl *2)
mtcars %<>% transform(cyl = cyl * 2)
rm(list=ls())
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df$b <- (df$b - min(df$b, na.rm = TRUE)) /
(max(df$b, na.rm = TRUE) - min(df$a, na.rm = TRUE))
df$c <- (df$c - min(df$c, na.rm = TRUE)) /
(max(df$c, na.rm = TRUE) - min(df$c, na.rm = TRUE))
df$d <- (df$d - min(df$d, na.rm = TRUE)) /
(max(df$d, na.rm = TRUE) - min(df$d, na.rm = TRUE))
(df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
# Then we try dumbing it down
x <- df$a
(x - min(x, na.rm = TRUE)) /
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
rng <- range(x, na.rm = TRUE)
rescale01 <- function(x){
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0, 5, 10))
# Try a few different inputs:
rescale01(c(-10, 0, 10))
rescale01(c(1, 2, 3, NA, 5))
df$a <- rescale01(df$a)
df$b <- rescale01(df$b)
df$c <- rescale01(df$c)
df$d <- rescale01(df$d)
rescale01(x)
x <- c(1:10, Inf)
rescale01(x)
rng <- range(x, na.rm = TRUE, finite = TRUE)
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE, finite = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(x)
!is.na(nms) & nms != ""
has_name <- function(x){
nms <- names(x)
if(is.null(nms)){
rep(FALSE, length(x))}
else{
!is.na(nms) & nms != ""
}
}
if(c(TRUE, FALSE)){}
if(NA){}
if(TRUE){}
identical(0L, 0)
x <- sqrt(2) ^ 2
x
x == 2
x - 2
near(x, 2)
if (this) {
# do that
} else if (that) {
# do something else
} else {
#
}
opurrators <- function(x, y, op){
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!"))
}
opurrators(2, 3, plus)
opurrators(2, 3, "plus")
opurrators(2, 3, "times")
mean_ci <- function(x, conf = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - conf
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
x <- runif(100)
mean_ci(x)
mean_ci(x, conf = 0.99)
# Good
mean(1:10, na.rm = TRUE)
# Bad
mean(x = 1:10, , FALSE)
mean(, TRUE, x = c(1:10, NA))
wt_mean <- function(x, w) {
sum(x * w) / sum(x)
}
wt_var <- function(x, w) {
mu <- wt_mean(x, w)
sum(w * (x - mu) ^ 2) / sum(w)
}
wt_sd <- function(x, w) {
sqrt(wt_var(x, w))
}
wt_mean(1:6, 1:3)
wt_mean <- function(x, w) {
if (length(x) != length(w)) {
stop("`x` and `w` must be the same length", call. = FALSE)
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 1:3)
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(w))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(x)
}
wt_mean(1:6, 6:1, na.rm = "foo")
sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
stringr::str_c("a", "b", "c", "d", "e", "f")
commas <- function(...) stringr::str_c(..., collapse = ", ")
commas(letters[1:10])
cat(title, " ", stringr::str_dup(pad, width), "\n", sep = "")
rule <- function(..., pad = "-"){
title <- paste0(...)
width <- getOption("width") - nchar(title) - 5
cat(title, " ", stringr::str_dup(pad, width), "\n", sep = "")
}
rule("Important output")
complicated_function <- function(x, y, z) {
if (length(x) == 0 || length(y) == 0) {
return(0)
}
# Complicated code here
}
f <- function() {
if (x) {
# Do
# something
# that
# takes
# many
# lines
# to
# express
} else {
# return something short
}
}
f <- function() {
return(something_short)
if (!x) {
return(something_short)
}
f <- function() {
if (!x) {
return(something_short)
}
}
show_missings <- function(df) {
n <- sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
show_missings(mtcars)
x <- show_missings(mtcars)
class(x)
dim(x)
mtcars %>%
show_missings() %>%
mutate(mpg = ifelse(mpg < 20, NA, mpg)) %>%
show_missings()
show_missings <- function(df) {
n <- sum(is.na(df))
cat("Missing values: ", n, "\n", sep = "")
invisible(df)
}
f <- function(x) {
x + y
}
y <- 100
f(10)
y <- 1000
f(10)
